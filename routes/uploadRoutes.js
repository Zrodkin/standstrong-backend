// server/routes/uploadRoutes.js
import express from 'express';
// Assuming uploadMiddleware will be configured to save in 'uploads/partner-logos'
import upload from '../middleware/uploadMiddleware.js';
import multer from 'multer'; // Import multer to catch its specific errors

const router = express.Router();

// POST /api/upload - Handles partner logo uploads
// Consider if this route should be more specific, e.g., /api/upload/partner-logo
// if you plan other upload types later.
router.post('/', upload.single('file'), (req, res, next) => { // Add 'next' for error handling
  // Check if the file was actually uploaded and accepted by middleware
  if (!req.file) {
    // Note: If multer's fileFilter rejected the file, an error might be passed via 'next(err)' instead.
    // This check handles cases where maybe no file was sent at all.
    console.log('Upload attempt failed: No file received or file rejected early.');
    return res.status(400).json({ message: 'No file uploaded or invalid file type.' });
  }

  // Construct the correct filePath including the subdirectory
  // req.file.filename is the name generated by multer's `filename` function
  const filePath = `/uploads/partner-logos/${req.file.filename}`;

  console.log(`File uploaded via uploadRoutes: ${filePath}`);

  // Send the successful response with the correct path
  res.status(201).json({
    message: 'File uploaded successfully',
    filePath: filePath // This path should be stored in your database
  });

});

// Optional but Recommended: Add specific error handling for this route
router.use((err, req, res, next) => {
  console.error("Error in upload route:", err); // Log the actual error

  if (err instanceof multer.MulterError) {
    // Handle specific Multer errors (e.g., file size limit)
    return res.status(400).json({ message: `File upload error: ${err.message}` });
  } else if (err) {
    // Handle errors from fileFilter or other unexpected errors
    // Check if it's the specific error message from your filter
    if (err.message && err.message.includes('Invalid file type')) {
         return res.status(400).json({ message: err.message });
    }
    // Generic error
    return res.status(500).json({ message: err.message || 'An unexpected error occurred during file upload.' });
  }
  // If no error handled here, pass to next error handler if any
  next();
});


export default router;